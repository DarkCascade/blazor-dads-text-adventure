@using blazor_dads_text_adventure.Data;
@using blazor_dads_text_adventure.Services
@using blazor_dads_text_adventure.Utilities

@inject SceneLoader SceneLoader
@inject HttpClient Http

@page "/chapter1"
@*<button class="btn btn-primary restartButton" @onclick="Restart">Restart</button>*@

@if (LoadedData == false)
{
    <div>Loading . . .</div>
}
else
{
    <div class="backgroundOfBackground">
        <div class="mainSceneBackground">
            <span class="mainScene">@(GetSceneText())</span>
        </div>
    </div>
    

    <div class="availableActions">
        @foreach (var action in @ActiveScene.Actions)
        {
            <button class="btn btn-primary" @onclick=@((e) => { ExecuteAction(action.Target); })>@action.Text</button>
        }
    </div>

    <div style="display: none;">
        Active Scene Info:<br />
        <p>@(ActiveScene.ToMarkupString())</p>
    </div>
}

@functions {
    private bool LoadedData { get; set; } = false;
    private Scene ActiveScene { get; set; }
    private SceneNavigator SceneNavigator { get; set; } = null;
    
    protected override async Task OnInitializedAsync()
    {
        var scenes = await SceneLoader.LoadScenes(Http);
        var config = await SceneLoader.LoadConfiguration(Http);

        SceneNavigator = new SceneNavigator(scenes, config);

        ActiveScene = SceneNavigator.GetActiveScene();

        LoadedData = true;
    }

    private MarkupString GetSceneText()
    {
        return SceneNavigator.GetSceneText(ActiveScene.SceneKey);
    }

    private void ExecuteAction(string actionTarget)
    {
        ActiveScene = SceneNavigator.GetActiveScene(actionTarget);
    }
}
